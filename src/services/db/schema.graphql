type User {
    sub: String @unique
    displayName: String! @unique
    cubes: [Cube] @relation
    type: Usertype!
    active: Boolean!
    profile: Profile,
    imageUrl: String
}

enum Usertype{
    FREE, PATRON
}

type Profile @embedded {
    owner: User! @relation
    description: String
}

type Cube {
    handle: String! @unique
    name: String!
    cards: [Card!]
    workspace: [Card!]
    owner: User! @relation
}

type Card @embedded {
    cardId: String!
}

type Query {
    allUsers: [User!]!
    findUserByDisplayName( displayName: String! ): User
    findUserBySub( sub: String! ): User

    allCubes: [Cube!]!
    findCubeByHandle( handle: String! ): Cube
}

#type Mutation {
#    changeUserByDisplayname( displayName: String!, sub: String! ): User! @resolver(name: "update_sub_by_displayname", paginated: false)
#    changeSomething( displayName: String! ) : User! @resolver( name: "changeSomething", paginated: false )
#}