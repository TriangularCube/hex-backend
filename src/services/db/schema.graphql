type User {
    sub: String @unique
    displayName: String! @unique
    cubes: [Cube] @relation
    type: Usertype! # TODO Change this to Enum at some point
    active: Boolean!
}

enum Usertype{
    FREE, PATRON
}

type Card @embedded {
    cardId: String!
}

type Cube {
    id: String! @unique
    name: String!
    cards: [Card!]
    owner: User! @relation
}

type Query {
    allUsers: [User!]!
    allCubes: [Cube!]!
    findUserByDisplayname( displayName: String! ): User
    findUserBySub( sub: String! ): User
}

#type Mutation {
#    changeUserByDisplayname( displayName: String!, sub: String! ): User! @resolver(name: "update_sub_by_displayname", paginated: false)
#    changeSomething( displayName: String! ) : User! @resolver( name: "changeSomething", paginated: false )
#}